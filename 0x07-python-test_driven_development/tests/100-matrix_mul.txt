The ``100-matrix_mul`` module
=============================

Using ``matrix_mul``
--------------------

Import ``matrix_mul`` function from ``100-matrix_mul`` module:

	>>> matrix_mul = __import__('100-matrix_mul').matrix_mul

Test matrix:

	>>> matrix_mul([[1, 2], [3, 4]], [[5, 6], [7, 8]])
	[[19, 22], [43, 50]]

Test matrix:

	>>> matrix_mul([[5]], [[2]])
	[[10]]

Test matrix:

	>>> matrix_mul([[1, 2, 3], [3, 1, 4]], [[1, 2], [5, 6], [7, 8]])
	[[32, 38], [36, 44]]

Test matrix:

	>>> matrix_mul([[1, 2]], [[3, 2], [2, 3]])
	[[7, 8]]

Test matrix:

	>>> matrix_mul([[1, 2, 3], [3, 1, 4]], [[1, 2], [7, 8]])
	Traceback (most recent call last):
		...
	ValueError: m_a and m_b can't be multiplied

Test matrix:

	>>> matrix_mul([], [[2]])
	Traceback (most recent call last):
		...
	ValueError: m_a can't be empty

Test matrix:

	>>> matrix_mul([[2]], [])
	Traceback (most recent call last):
		...
	ValueError: m_b can't be empty

Test matrix:

	>>> matrix_mul([[]], [[2]])
	Traceback (most recent call last):
		...
	ValueError: m_a can't be empty

Test matrix:

	>>> matrix_mul([[2]], [[]])
	Traceback (most recent call last):
		...
	ValueError: m_b can't be empty

Test matrix:

	>>> matrix_mul("hello", [[2]])
	Traceback (most recent call last):
		...
	TypeError: m_a must be a list

Test matrix:

	>>> matrix_mul([[2]], "hi")
	Traceback (most recent call last):
		...
	TypeError: m_b must be a list

Test matrix:

	>>> matrix_mul([[2, 5, 3]], [[2]])
	Traceback (most recent call last):
		...
	ValueError: m_a and m_b can't be multiplied

Test matrix:

	>>> matrix_mul([2, 5, 3], [[2]])
	Traceback (most recent call last):
		...
	TypeError: m_a must be a list of lists

Test matrix:

	>>> matrix_mul([[15]], [2, 5, 3])
	Traceback (most recent call last):
		...
	TypeError: m_b must be a list of lists

Test matrix:

	>>> matrix_mul([["school"]], [2, 5, 3])
	Traceback (most recent call last):
		...
	TypeError: m_b must be a list of lists

Test matrix:
	>>> matrix_mul([["school"]], [[2, 5, 3]])
	Traceback (most recent call last):
		...
	TypeError: m_a should contain only integers of floats

Test matrix:

	>>> matrix_mul([[2, 5, 3]], [["great"]])
	Traceback (most recent call last):
		...
	TypeError: m_b should contain only integers or floats

Test matrix:

	>>> matrix_mul([[1, 4], [1, 2, 3], [3, 1]], [[1, 2, 3], [7, 8]])
	Traceback (most recent call last):
		...
	TypeError: each row of m_a must be of the same size

Test matrix:

	>>> matrix_mul([[1, 4], [2, 3], [3, 1]], [[1, 2, 3], [7, 8]])
	Traceback (most recent call last):
		...
	TypeError: each row of m_b must be of the same size

Test matrix:

	>>> matrix_mul([[1]])
	Traceback (most recent call last):
		...
	TypeError: matrix_mul() missing 1 required positional argument: 'm_b'

Test matrix:

	>>> matrix_mul()
	Traceback (most recent call last):
		...
	TypeError: matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'
