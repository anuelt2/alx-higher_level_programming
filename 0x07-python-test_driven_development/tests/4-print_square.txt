The ``4-print_square`` module
===============================

Using ``print_square``
------------------------

Import ``print_square`` function from ``4-print_square`` module:

	>>> print_square = __import__('4-print_square').print_square

Test size = 0:

	>>> print_square(0)

Test size = 1:

	>>> print_square(1)
	#

Test size = 2:

	>>> print_square(2)
	##
	##

Test size = 3:

	>>> print_square(3)
	###
	###
	###

Test size = 4:

	>>> print_square(4)
	####
	####
	####
	####

Test size = 10:

	>>> print_square(10)
	##########
	##########
	##########
	##########
	##########
	##########
	##########
	##########
	##########
	##########

Test float size:

	>>> print_square(4.5)
	Traceback (most recent call last):
		...
	TypeError: size must be an integer

Test float size < 0:

	>>> print_square(-4.5)
	Traceback (most recent call last):
		...
	TypeError: size must be an integer

Test int size < 0:

	>>> print_square(-10)
	Traceback (most recent call last):
		...
	ValueError: size must be >= 0

Test string size:

	>>> print_square("size")
	Traceback (most recent call last):
		...
	TypeError: size must be an integer

Test with no arguments:

	>>> print_square()
	Traceback (most recent call last):
		...
	TypeError: print_square() missing 1 required positional argument: 'size'

Test size = None:

	>>> print_square(None)
	Traceback (most recent call last):
		...
	TypeError: size must be an integer

Test size = 'NaN':

	>>> print_square(float('NaN'))
	Traceback (most recent call last):
		...
	TypeError: size must be an integer

Test size = 'inf':

	>>> print_square(float('inf'))
	Traceback (most recent call last):
		...
	TypeError: size must be an integer
