The ``1-my_list`` module
========================

Using ``MyList``
----------------

Import ``MyList`` class from ``1-my_list`` module:

	>>> MyList = __import__('1-my_list').MyList

Test mlist same class as MyList:

	>>> mlist = MyList()
	>>> type(mlist) == MyList
	True

Test mlist is instance of MyList:

	>>> mlist = MyList()
	>>> isinstance(mlist, list)
	True

Test method type of print_sorted:

	>>> type(MyList.__dict__['print_sorted'])
	<class 'function'>

Test normal case:

	>>> mlist = MyList([1, 2, 7, 5, 3])
	>>> mlist.print_sorted()
	[1, 2, 3, 5, 7]

Test list of negative ints:

	>>> mlist = MyList([0, -1, -32, -7, -5, -53])
	>>> mlist.print_sorted()
	[-53, -32, -7, -5, -1, 0]

Test original list unchanged:

	>>> mlist = MyList([1, 2, 7, 5, 3])
	>>> mlist.print_sorted()
	[1, 2, 3, 5, 7]
	>>> mlist
	[1, 2, 7, 5, 3]

Test already sorted list:

	>>> mlist = MyList([1, 2, 3, 4, 5, 67, 85, 300])
	>>> mlist.print_sorted()
	[1, 2, 3, 4, 5, 67, 85, 300]

Test append functionality:

	>>> mlist = MyList([1, 2, 7, 5, 3])
	>>> mlist.append(0)
	>>> mlist
	[1, 2, 7, 5, 3, 0]

Test empty list:

	>>> mlist = MyList()
	>>> mlist.print_sorted()
	[]

Test list of large ints:

	>>> mlist = MyList([99999999, 88888888, 11111111, 33333333, 66666666, 0])
	>>> mlist.print_sorted()
	[0, 11111111, 33333333, 66666666, 88888888, 99999999]


Test class method call of print_sorted, no arguments:

	>>> mlist.__class__.print_sorted()
	Traceback (most recent call last):
		...
	TypeError: MyList.print_sorted() missing 1 required positional argument: 'self'

Test method call of print_sorted, 1 argument:

	>>> mlist.print_sorted([1, 2, 7, 5, 3])
	Traceback (most recent call last):
		...
	TypeError: MyList.print_sorted() takes 1 positional argument but 2 were given

Test method call of print_sorted, 2 arguments:

	>>> mlist.print_sorted([1, 2, 7, 5, 3], 7)
	Traceback (most recent call last):
		...
	TypeError: MyList.print_sorted() takes 1 positional argument but 3 were given
